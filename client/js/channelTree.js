/**
 * Builds html for displaying the channel tree on basis of <ul>
 * 	@params
 *		channel: root channel for which to generate the html (if undefined, the root channel of the ChanneTree is assumed)
 *		path: base path of channel (if undefined, the empty base path ("") is assumed)
 *	@return
 *		JQuery object of the channel
 */
ChannelTree.prototype.buildChannelHTML = function(channel, path){
	if(channel == undefined){
		channel = this.channels;
	}
	if(path === undefined){
		path = "";
	}
	path += "/" + channel.name;
	
	var html = this.generateChannelElement(channel, path);
	channel.html = html;
	
	var userList = $("<ul></ul>");
	for(var i = 0; i < channel.users.length; i++){
		var user = this.generateUserElement(channel.users[i]);
		channel.users[i].html = user;
		userList.append(user);
	}
	channel.userList = userList;
	html.append(userList);
	
	var subChannelList = $("<ul><ul>");
	for(var i = 0; i < channel.children.length; i++){
		this.buildChannelHTML(channel.children[i], path).appendTo(subChannelList);
	}
	channel.channelList = subChannelList;
	html.append(subChannelList);
	
	return html;
};

/**
 * Generates the <li> for a user. All user elements have the class "user"
 * @param
 *		user: the user
 *	@return
 *		JQuery object of the user
 */
ChannelTree.prototype.generateUserElement = function(user){
	return $("<li></li>", {
		id: user.name,
		"class": "user",
		text: user.name
	});
};

/**
 * Generates a bare <li> for a channel. This does not yet contain any users or subchannel. Any element generated by this will have an id given by path and the class "channel".
 * @param
 * 		channel: the channel
 * 		path: the path of the channel, used as id
 * 	@return
 * 		Bare JQuery object of the channel
 */
ChannelTree.prototype.generateChannelElement = function(channel, path){
	return $("<li></li>", {
		id: path,
		"class": "channel",
		text: channel.name
	});
};

/**
 * Adds the specified user to the specified channel. Channel can either be a channel object or a path.
 * 	@param
 *		user: user object to add to the channel
 *		channel: channel to which the user should be added; it can be an object or a path
 *	@return
 *		undefined
 */
ChannelTree.prototype.addUser = function(user, channel){
	if(channel === undefined){
		channel = this.channels;
	}
	if(typeof channel === "string" || channel instanceof String){
		channel = this.findChannelByPath(channel);
	}
	channel.users.push(user);
	
	user.html = user.generateUserElement(user);
	channel.userList.attach(user.html);
}